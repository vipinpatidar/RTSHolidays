# specify the version of docker-compose
version: "3.8"

# define the services/containers to be run
services:
  # define the backend service/container
  backend:
    # api service depends on the db service so the db service will be started before the api service
    depends_on:
      - db

    build:
      context: .
      dockerfile: Dockerfile

    ports:
      - "3000:3000" # Map backend port

    # specify environment variables for the backend service
    # for demo purposes, we're using a local mongodb instance
    env_file:
      - ./backend/.env

      # add a .env file in the backend directory with environment variables like
      #PORT=3000
      #MONGODB_URL=your mongodb url
      #ACCESS_TOKEN_SECRET= your access token secret
      #REFRESH_TOKEN_SECRET= your refresh token secret
      #NODE_ENV= development
      #FRONTEND_URL = http://localhost:5173
      #CLOUDINARY_CLOUD_NAME= your cloudinary cloud name
      #CLOUDINARY_API_KEY= your cloudinary api key
      #CLOUDINARY_API_SECRET = your cloudinary api secret
      #STRIPE_SECRET_API_KEY = your stripe secret api key

    # establish docker compose watch mode for the backend service
    develop:
      # specify the files to watch for changes
      watch:
        # it'll watch for changes in package.json and package-lock.json and rebuild the container and image if there are any changes
        - path: ./backend/package.json
          action: rebuild
        - path: ./backend/package-lock.json
          action: rebuild

        # it'll watch for changes in the backend directory and sync the changes with the container real time
        - path: ./backend
          target: /app
          action: sync

  # define the db service
  db:
    # specify the image to use for the db service from docker hub. If we have a custom image, we can specify that in this format
    # In the above two services, we're using the build context to build the image for the service from the Dockerfile so we specify the image as "build: ./frontend" or "build: ./backend".
    # but for the db service, we're using the image from docker hub so we specify the image as "image: mongo:latest"
    # you can find the image name and tag for mongodb from docker hub here: https://hub.docker.com/_/mongo
    image: mongo:latest

    # specify the ports to expose for the db service
    # generally, we do this in backend service using mongodb atlas. But for demo purposes, we're using a local mongodb instance
    # usually, mongodb runs on port 27017. So we're exposing the port 27017 on the host machine and mapping it to the port 27017 inside the container
    ports:
      - 27017:27017

    # specify the volumes to mount for the db service
    # we're mounting the volume named "hotelDB" inside the container at /data/db directory
    # this is done so that the data inside the mongodb container is persisted even if the container is stopped
    volumes:
      - hotelDB:/data/db

# define the volumes to be used by the services
volumes:
  hotelDB:
